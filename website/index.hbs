---
pagination:
  data: puzzles
  size: 1
  alias: puzzle
---
<!DOCTYPE html>
<html>

<head>
    <title>Ringram</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link rel="stylesheet" href="/stylistic_styles.css" />
    <link rel="stylesheet" href="/practical_styles.css" />
    
    <script src="/alpine.min.js" defer></script>
    <script>
        let patternmap = {{{json morse}}}
        function morse(l) {
            // coerce to uppercase
            let letter = l.toUpperCase();
            if (!patternmap[letter]) {
                return "";
            }
            return patternmap[letter];
        }
        function letterToDotsDashes(letter) {
            // returns dots, dashes (integers) for a given letter
            let dots = 0;
            let dashes = 0;
            let pattern = morse(letter);
            for (let i = 0; i < pattern.length; i++) {
                if (pattern[i] === ".") {
                    dots++;
                } else if (pattern[i] === "-") {
                    dashes++;
                }
            }
            return {dots, dashes};
        }
        function listToDotsDashes(letterList) {
            // returns dots, dashes (integers) for a given list of letters
            let dots = 0;
            let dashes = 0;
            for (let i = 0; i < letterList.length; i++) {
                let {dots: d, dashes: da} = letterToDotsDashes(letterList[i]);
                dots += d;
                dashes += da;
            }
            return {dots, dashes};
        }
    </script>
    <script>
        function findTabStop(direction, el) {
            // find next (direction 1) or previous (direction -1) tab stop from el
            var universe = document.querySelectorAll('input, button, select, textarea, a[href]');
            var list = Array.prototype.filter.call(universe, function(item) {return item.tabIndex >= "0" && !item.disabled && !item.hidden;});
            var index = list.indexOf(el);
            if (direction == 1) {
                return list[index + 1] || list[0];
            } else if (direction == -1) {
                return list[index - 1] || list[list.length - 1];
            }
        }
    </script>
</head>

<body>
    <header>
        <h1>Morse Puzzles</h1>
    </header>
    <main>
        {{#with puzzle}}
        <form id="puzzle" x-data='{
            letter0: "{{getindex (flatten letters) 0}}",
            letter1: "{{getindex (flatten letters) 1}}",
            letter2: "{{getindex (flatten letters) 2}}",
            letter3: "{{getindex (flatten letters) 3}}",
            letter4: "{{getindex (flatten letters) 4}}",
            letter5: "{{getindex (flatten letters) 5}}",
            letter6: "{{getindex (flatten letters) 6}}",
            letter7: "{{getindex (flatten letters) 7}}",
            letter8: "{{getindex (flatten letters) 8}}",
            letter9: "{{getindex (flatten letters) 9}}",
            letter10: "{{getindex (flatten letters) 10}}",
            letter11: "{{getindex (flatten letters) 11}}",
            get letters () {
                return [
                    [this.letter0, this.letter1, this.letter2, this.letter3],
                    [this.letter4,                             this.letter5],
                    [this.letter6,                             this.letter7],
                    [this.letter8, this.letter9, this.letter10, this.letter11],
                ]
            },
            get lettersTransposed() {
                return [
                    [this.letter0, this.letter4, this.letter6, this.letter8],
                    [this.letter1,                             this.letter9],
                    [this.letter2,                             this.letter10],
                    [this.letter3, this.letter5, this.letter7, this.letter11],
                ]
            },
            get rows() {
                return [
                    listToDotsDashes(this.letters[0]),
                    listToDotsDashes(this.letters[1]),
                    listToDotsDashes(this.letters[2]),
                    listToDotsDashes(this.letters[3])
                ]
            },
            get columns() {
                return [
                    listToDotsDashes(this.lettersTransposed[0]),
                    listToDotsDashes(this.lettersTransposed[1]),
                    listToDotsDashes(this.lettersTransposed[2]),
                    listToDotsDashes(this.lettersTransposed[3])
                ]
            },
        }'>
            <!-- centre -->
            <div class="centre"></div>

            <!-- top dots -->
            {{#each [dots-top]}}
            <div class="top dots _{{@index}}" x-data="{ ind: {{@index}}, tot: {{this}} }">
                {{#each (list this)}}
                <div class="dot" :class="[columns[ind].dots > {{@index}} ? 'used' : '', columns[ind].dots > {{@index}} + tot ? 'over' : '']"></div>
                {{!-- <span x-text="columns[ind].dots + ' dots'"></span> --}}
                {{!-- <span><span x-text="ind"></span>, {{@index}}</span> --}}
                {{/each}}
                <template x-if="tot == 0">
                    <div class="dot" :class="[columns[ind].dots > 0 ? 'over' : 'hidden']"></div>
                </template>
            </div>
            {{/each}}

            <!-- left dots -->
            {{#each [dots-left]}}
            <div class="left dots _{{@index}}" x-data="{ ind: {{@index}}, tot: {{this}} }">
                {{#each (list this)}}
                <div class="dot" :class="[rows[ind].dots > {{@index}} ? 'used' : '', rows[ind].dots > {{@index}} + tot ? 'over' : '']"></div>
                {{/each}}
                <template x-if="tot == 0">
                    <div class="dot" :class="[rows[ind].dots > 0 ? 'over' : 'hidden']"></div>
                </template>
            </div>
            {{/each}}

            <!-- bottom dashes -->
            {{#each [dashes-bottom]}}
            <div class="bottom dashes _{{@index}}" x-data="{ ind: {{@index}}, tot: {{this}} }">
                {{#each (list this)}}
                <div class="dash" :class="columns[ind].dashes > {{@index}}?(columns[ind].dashes>({{@index}} + tot)?'over':'used'):''"></div>
                {{/each}}
                <template x-if="tot == 0">
                    <div class="dash" :class="[columns[ind].dashes > 0 ? 'over' : 'hidden']"></div>
                </template>
            </div>
            {{/each}}

            <!-- right dashes -->
            {{#each [dashes-right]}}
            <div class="right dashes _{{@index}}" x-data="{ ind: {{@index}}, tot: {{this}} }">
                {{#each (list this)}}
                <div class="dash" :class="rows[ind].dashes > {{@index}}?(rows[ind].dashes>({{@index}} + tot)?'over':'used'):''"></div>
                {{/each}}
                <template x-if="tot == 0">
                    <div class="dash" :class="[rows[ind].dashes > 0 ? 'over' : 'hidden']"></div>
                </template>
            </div>
            {{/each}}

            <!-- inputs -->
            {{#each (flatten letters)}}
            {{#if this}}
            <input type="text" value="{{this}}" disabled x-model="letter{{@index}}" />
            {{else}}
            {{!-- go to prev input on left --}}
            {{!-- go to prev input on backspace --}}
            {{!-- go to next input on right--}}
            <input type="text" maxlength="1" x-model="letter{{@index}}" x-on:keydown.backspace.throttle="if ($event.target.value === '') {findTabStop(-1, $event.target).focus()}" {{#if @first}}{{else}}x-on:keydown.left.prevent="findTabStop(-1, $event.target).focus()"{{/if}} {{#if @last}}{{else}}x-on:keydown.right="findTabStop(1, $event.target).focus()"{{/if}}/>
            {{/if}}
            {{/each}}
        </form>
        {{/with}}

        <section class="nextprev">
        {{#if pagination.previous}}
            {{#if (eq pagination.pageNumber 1)}}
            <a href="../">Previous</a>
            {{else}}
            <a href="../{{add pagination.pageNumber -1}}">Previous</a>
            {{/if}}
            {{else}}
            <span>Previous</span>
        {{/if}}
        {{#if pagination.next}}
            {{#if (eq pagination.pageNumber 0)}}
            <a href="./{{add pagination.pageNumber 1}}">Next</a>
            {{else}}
            <a href="../{{add pagination.pageNumber 1}}">Next</a>
            {{/if}}
            {{else}}
            <span>Next</span>
        {{/if}}
        </section>

        <section class="morse" x-data="{ vmorse: false }">
            <div>
                <label for="vmorse">Use VMORSE</label>
                <input type="checkbox" id="vmorse" x-model="vmorse" />
            </div>
            <section class="cheatsheet">
                {{#each morse}}
                <template x-if="vmorse">
                    <div class="translation">
                        {{@key}}: <span class="vmorse">{{@key}}</span>
                    </div>
                </template>
                <template x-if="!vmorse">
                    <div class="translation">
                        <span class="original">
                            {{@key}}
                        </span>
                        <span class="morse">
                        {{#each (strToList this)}}
                            {{#if (eq this ".")}}
                            <div class="dot used"></div>
                            {{else}}
                            <div class="dash used"></div>
                            {{/if}}
                        {{/each}}
                        </span>
                    </div>
                </template>
                {{/each}}
            </section>
        </section>
    </main>
</body>

</html>